name: "Sandbox Example:  Managing Account Balances"
headers:
    - key: Content-Type
      value: application/json
tests:
    - name: "Create Account 1"
      method: POST
      path: "v1/accounts"
      body: |
          {
            "account_id": "{{ACCT1}}",
            "balance": 100
          }
      setup_script: |
          const uuidv4 = require('uuid');
          pm.environment.set("ACCT1", "abc-" + uuidv4());
      test_script: |
          pm.test("ok", () => {
              let data = pm.response.json();
              console.log(data);
              pm.response.to.have.status(200);
              pm.expect(data).to.not.have.property("exception");
          });
    - name: "Create Account 2"
      method: POST
      path: "v1/accounts"
      body: |
          {
            "account_id": "{{ACCT2}}",
            "balance": 100
          }
      setup_script: |
          const uuidv4 = require('uuid');
          pm.environment.set("ACCT2", "xyz-" + uuidv4());
      test_script: |
          pm.test("ok", () => {
              let data = pm.response.json();
              console.log(data);
              pm.response.to.have.status(200);
              pm.expect(data).to.not.have.property("exception");
          });
    - name: "Transfer"
      method: POST
      path: "v1/transfer"
      body: |
          {
            "payer_id": "{{ACCT1}}",
            "payee_id": "{{ACCT2}}",
            "transfer_amount": 20
          }
      test_script: |
          pm.test("ok", () => {
              let data = pm.response.json();
              console.log(data);
              pm.response.to.have.status(200);
              pm.expect(data).to.not.have.property("exception");
          });
    - name: "Get Account: 2"
      method: GET
      path: "v1/account/{{ACCT2}}"
      test_script: |
          pm.test("ok", () => {
              let data = pm.response.json();
              console.log(data);
              pm.response.to.have.status(200);
              pm.expect(data).to.not.have.property("exception");
              pm.expect(data).to.have.property("account");
              pm.expect(data.account.account_id).to.equal(pm.environment.get("ACCT2"));
              // int64 protobuf fields come out as strings in javascript
              pm.expect(data.account.balance).to.equal('120');
          });
