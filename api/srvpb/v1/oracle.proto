// Copyright Â© 2021 Luther Systems, Ltd. All right reserved.

// API Specification and Documentation.

syntax = "proto3";

package srvpb.v1;

import "google/api/annotations.proto";
import "pb/v1/oracle.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/luthersystems/sandbox/api/srv";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Sandbox API"
    version: "1.0"
    description: ""
  }
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "X-API-KEY"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-API-KEY"
      }
    }
  }
  responses: {
    key: "401"
    value: {
      description: "Authorization failed"
      schema: {
        json_schema: {ref: ".common.ExceptionResponse"}
      }
    }
  }
  responses: {
    key: "400"
    value: {
      description: "Bad request determined by business logic"
      schema: {
        json_schema: {ref: ".common.ExceptionResponse"}
      }
    }
  }
  responses: {
    key: "404"
    value: {
      description: "Missing resource"
      schema: {
        json_schema: {ref: ".common.ExceptionResponse"}
      }
    }
  }
  responses: {
    key: "403"
    value: {
      description: "Permission denied"
      schema: {
        json_schema: {ref: ".common.ExceptionResponse"}
      }
    }
  }
  responses: {
    key: "405"
    value: {
      description: "Method not allowed"
      schema: {
        json_schema: {type: STRING}
      }
    }
  }
  responses: {
    key: "500"
    value: {
      description: "Unexpected internal server error"
      schema: {
        json_schema: {ref: ".common.ExceptionResponse"}
      }
    }
  }
  responses: {
    key: "503"
    value: {
      description: "Service not available"
      schema: {
        json_schema: {ref: ".common.ExceptionResponse"}
      }
    }
  }
};

// REST-JSON API Docs for the scaffold project.
service SandboxService {
  // Check the health of the scaffold processor. This is used by load balancers to check end-to-end service health.
  rpc HealthCheck(pb.v1.HealthCheckRequest) returns (pb.v1.HealthCheckResponse) {
    option (google.api.http) = {get: "/v1/health_check"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Service"};
  }
  rpc CreateAccount(pb.v1.CreateAccountRequest) returns (pb.v1.CreateAccountResponse) {
    option (google.api.http) = {
      post: "/v1/accounts/{account.account_id}"
      body: "account"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Service"};
  }
  rpc GetAccount(pb.v1.GetAccountRequest) returns (pb.v1.GetAccountResponse) {
    option (google.api.http) = {get: "/v1/accounts/{account_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Service"};
  }
  rpc Transfer(pb.v1.TransferRequest) returns (pb.v1.TransferResponse) {
    option (google.api.http) = {
      post: "/v1/transfer"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Service"};
  }
}
