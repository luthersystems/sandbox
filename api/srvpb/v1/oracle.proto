// Copyright Â© 2021 Luther Systems, Ltd. All right reserved.

// API Specification and Documentation.

syntax = "proto3";

package srvpb.v1;

import "google/api/annotations.proto";
import "healthcheck/v1/healthcheck.proto";
import "pb/v1/oracle.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/luthersystems/sandbox/api/srv";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Ledger API"
    version: "1.0"
    description: ""
  }
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "X-API-KEY"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "X-API-KEY"
      }
    }
  }
  responses: {
    key: "401"
    value: {
      description: "Authorization failed"
      schema: {
        json_schema: {ref: ".common.v1.ExceptionResponse"}
      }
    }
  }
  responses: {
    key: "400"
    value: {
      description: "Bad request determined by business logic"
      schema: {
        json_schema: {ref: ".common.v1.ExceptionResponse"}
      }
    }
  }
  responses: {
    key: "404"
    value: {
      description: "Missing resource"
      schema: {
        json_schema: {ref: ".common.v1.ExceptionResponse"}
      }
    }
  }
  responses: {
    key: "403"
    value: {
      description: "Permission denied"
      schema: {
        json_schema: {ref: ".common.v1.ExceptionResponse"}
      }
    }
  }
  responses: {
    key: "405"
    value: {
      description: "Method not allowed"
      schema: {
        json_schema: {type: STRING}
      }
    }
  }
  responses: {
    key: "500"
    value: {
      description: "Unexpected internal server error"
      schema: {
        json_schema: {ref: ".common.v1.ExceptionResponse"}
      }
    }
  }
  responses: {
    key: "503"
    value: {
      description: "Service not available"
      schema: {
        json_schema: {ref: ".common.v1.ExceptionResponse"}
      }
    }
  }
};

// REST-JSON API Docs for the ledger project.
service LedgerService {
  // Check the health of the service. This is used by load balancers to check service health.
  rpc GetHealthCheck(healthcheck.v1.GetHealthCheckRequest) returns (healthcheck.v1.GetHealthCheckResponse) {
    option (google.api.http) = {get: "/v1/health_check"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Service"};
  }
  // Create a new account denominated in an underlying asset.
  rpc CreateAccount(pb.v1.CreateAccountRequest) returns (pb.v1.CreateAccountResponse) {
    option (google.api.http) = {
      post: "/v1/accounts"
      body: "account"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Service"};
  }
  // Update an account.
  rpc UpdateAccount(pb.v1.UpdateAccountRequest) returns (pb.v1.UpdateAccountResponse) {
    option (google.api.http) = {
      patch: "/v1/account/{account.account_id}"
      body: "account"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Service"};
  }
  // Delete an account.
  rpc DeleteAccount(pb.v1.DeleteAccountRequest) returns (pb.v1.DeleteAccountResponse) {
    option (google.api.http) = {delete: "/v1/account/{account_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Service"};
  }
  // Retrieve account details.
  rpc GetAccount(pb.v1.GetAccountRequest) returns (pb.v1.GetAccountResponse) {
    option (google.api.http) = {get: "/v1/account/{account_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Service"};
  }
  // Get accounts for a user.
  rpc GetUserAccounts(pb.v1.GetUserAccountsRequest) returns (pb.v1.GetUserAccountsResponse) {
    option (google.api.http) = {get: "/v1/user/{user_id}/accounts"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Service"};
  }
  // Transfer between accounts denominated in the same underlying asset.
  rpc Transfer(pb.v1.TransferRequest) returns (pb.v1.TransferResponse) {
    option (google.api.http) = {
      post: "/v1/transfer"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Service"};
  }
}
