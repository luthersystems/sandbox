// Copyright Â© 2024 Luther Systems, Ltd. All rights reserved.
// API Models and Documentation.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: pb/v1/oracle.proto

package v1

import (
	v1 "buf.build/gen/go/luthersystems/protos/protocolbuffers/go/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a nationality using an enum for structured validation.
type Nationality int32

const (
	Nationality_NATIONALITY_UNSPECIFIED Nationality = 0 // Default value (should not be used)
	Nationality_GB                      Nationality = 1 // United Kingdom
	Nationality_US                      Nationality = 2 // United States
	Nationality_FR                      Nationality = 3 // France
	Nationality_DE                      Nationality = 4 // Germany
)

// Enum value maps for Nationality.
var (
	Nationality_name = map[int32]string{
		0: "NATIONALITY_UNSPECIFIED",
		1: "GB",
		2: "US",
		3: "FR",
		4: "DE",
	}
	Nationality_value = map[string]int32{
		"NATIONALITY_UNSPECIFIED": 0,
		"GB":                      1,
		"US":                      2,
		"FR":                      3,
		"DE":                      4,
	}
)

func (x Nationality) Enum() *Nationality {
	p := new(Nationality)
	*p = x
	return p
}

func (x Nationality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Nationality) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_v1_oracle_proto_enumTypes[0].Descriptor()
}

func (Nationality) Type() protoreflect.EnumType {
	return &file_pb_v1_oracle_proto_enumTypes[0]
}

func (x Nationality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Nationality.Descriptor instead.
func (Nationality) EnumDescriptor() ([]byte, []int) {
	return file_pb_v1_oracle_proto_rawDescGZIP(), []int{0}
}

// Represents the final outcome of a claim.
type Status int32

const (
	Status_STATUS_UNSPECIFIED Status = 0 // Default value (should not be used)
	Status_STATUS_APPROVED    Status = 1 // Claim was approved
	Status_STATUS_DECLINED    Status = 2 // Claim was declined
	Status_STATUS_PAID        Status = 3 // Claim has been paid out
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_APPROVED",
		2: "STATUS_DECLINED",
		3: "STATUS_PAID",
	}
	Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_APPROVED":    1,
		"STATUS_DECLINED":    2,
		"STATUS_PAID":        3,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_v1_oracle_proto_enumTypes[1].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_pb_v1_oracle_proto_enumTypes[1]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_pb_v1_oracle_proto_rawDescGZIP(), []int{1}
}

// Represents the processing state of the claim (process progress).
type ClaimState int32

const (
	ClaimState_CLAIM_STATE_UNSPECIFIED                ClaimState = 0 // Default value (should not be used)
	ClaimState_CLAIM_STATE_NEW                        ClaimState = 1 // Claim was created
	ClaimState_CLAIM_STATE_LOECLAIM_DETAILS_COLLECTED ClaimState = 2 // Claimant details submitted
	ClaimState_CLAIM_STATE_LOECLAIM_ID_VERIFIED       ClaimState = 3 // Identity verified
	ClaimState_CLAIM_STATE_OOECLAIM_REVIEWED          ClaimState = 4 // Claim reviewed
	ClaimState_CLAIM_STATE_OOECLAIM_VALIDATED         ClaimState = 5 // Claim validated
	ClaimState_CLAIM_STATE_LOEFIN_INVOICE_ISSUED      ClaimState = 6 // Invoice issued
	ClaimState_CLAIM_STATE_OOEFIN_INVOICE_REVIEWED    ClaimState = 7 // Invoice reviewed
	ClaimState_CLAIM_STATE_OOEFIN_INVOICE_APPROVED    ClaimState = 8 // Invoice approved
	ClaimState_CLAIM_STATE_OOEPAY_PAYMENT_TRIGGERED   ClaimState = 9 // Payment triggered
)

// Enum value maps for ClaimState.
var (
	ClaimState_name = map[int32]string{
		0: "CLAIM_STATE_UNSPECIFIED",
		1: "CLAIM_STATE_NEW",
		2: "CLAIM_STATE_LOECLAIM_DETAILS_COLLECTED",
		3: "CLAIM_STATE_LOECLAIM_ID_VERIFIED",
		4: "CLAIM_STATE_OOECLAIM_REVIEWED",
		5: "CLAIM_STATE_OOECLAIM_VALIDATED",
		6: "CLAIM_STATE_LOEFIN_INVOICE_ISSUED",
		7: "CLAIM_STATE_OOEFIN_INVOICE_REVIEWED",
		8: "CLAIM_STATE_OOEFIN_INVOICE_APPROVED",
		9: "CLAIM_STATE_OOEPAY_PAYMENT_TRIGGERED",
	}
	ClaimState_value = map[string]int32{
		"CLAIM_STATE_UNSPECIFIED":                0,
		"CLAIM_STATE_NEW":                        1,
		"CLAIM_STATE_LOECLAIM_DETAILS_COLLECTED": 2,
		"CLAIM_STATE_LOECLAIM_ID_VERIFIED":       3,
		"CLAIM_STATE_OOECLAIM_REVIEWED":          4,
		"CLAIM_STATE_OOECLAIM_VALIDATED":         5,
		"CLAIM_STATE_LOEFIN_INVOICE_ISSUED":      6,
		"CLAIM_STATE_OOEFIN_INVOICE_REVIEWED":    7,
		"CLAIM_STATE_OOEFIN_INVOICE_APPROVED":    8,
		"CLAIM_STATE_OOEPAY_PAYMENT_TRIGGERED":   9,
	}
)

func (x ClaimState) Enum() *ClaimState {
	p := new(ClaimState)
	*p = x
	return p
}

func (x ClaimState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClaimState) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_v1_oracle_proto_enumTypes[2].Descriptor()
}

func (ClaimState) Type() protoreflect.EnumType {
	return &file_pb_v1_oracle_proto_enumTypes[2]
}

func (x ClaimState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClaimState.Descriptor instead.
func (ClaimState) EnumDescriptor() ([]byte, []int) {
	return file_pb_v1_oracle_proto_rawDescGZIP(), []int{2}
}

// Stores details of the claimant (person making the claim).
type Claimant struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AccountNumber   string                 `protobuf:"bytes,1,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`          // Bank account number (string to support leading zeros)
	AccountSortCode string                 `protobuf:"bytes,2,opt,name=account_sort_code,json=accountSortCode,proto3" json:"account_sort_code,omitempty"`  // Bank sort code (string to avoid leading-zero loss)
	Dob             string                 `protobuf:"bytes,3,opt,name=dob,proto3" json:"dob,omitempty"`                                                   // Date of birth (YYYY-MM-DD)
	Surname         string                 `protobuf:"bytes,4,opt,name=surname,proto3" json:"surname,omitempty"`                                           // Surname (last name)
	Forename        string                 `protobuf:"bytes,5,opt,name=forename,proto3" json:"forename,omitempty"`                                         // Forename (first name)
	FullAddress     string                 `protobuf:"bytes,6,opt,name=full_address,json=fullAddress,proto3" json:"full_address,omitempty"`                // Full address in a single field
	AddressNumber   string                 `protobuf:"bytes,7,opt,name=address_number,json=addressNumber,proto3" json:"address_number,omitempty"`          // House/building number
	AddressStreet1  string                 `protobuf:"bytes,8,opt,name=address_street1,json=addressStreet1,proto3" json:"address_street1,omitempty"`       // Street address
	AddressPostcode string                 `protobuf:"bytes,9,opt,name=address_postcode,json=addressPostcode,proto3" json:"address_postcode,omitempty"`    // Postal code (ZIP code)
	AddressPostTown string                 `protobuf:"bytes,10,opt,name=address_post_town,json=addressPostTown,proto3" json:"address_post_town,omitempty"` // Post town or city
	Nationality     Nationality            `protobuf:"varint,11,opt,name=nationality,proto3,enum=pb.v1.Nationality" json:"nationality,omitempty"`          // Nationality, stored as an enum
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Claimant) Reset() {
	*x = Claimant{}
	mi := &file_pb_v1_oracle_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Claimant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claimant) ProtoMessage() {}

func (x *Claimant) ProtoReflect() protoreflect.Message {
	mi := &file_pb_v1_oracle_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claimant.ProtoReflect.Descriptor instead.
func (*Claimant) Descriptor() ([]byte, []int) {
	return file_pb_v1_oracle_proto_rawDescGZIP(), []int{0}
}

func (x *Claimant) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *Claimant) GetAccountSortCode() string {
	if x != nil {
		return x.AccountSortCode
	}
	return ""
}

func (x *Claimant) GetDob() string {
	if x != nil {
		return x.Dob
	}
	return ""
}

func (x *Claimant) GetSurname() string {
	if x != nil {
		return x.Surname
	}
	return ""
}

func (x *Claimant) GetForename() string {
	if x != nil {
		return x.Forename
	}
	return ""
}

func (x *Claimant) GetFullAddress() string {
	if x != nil {
		return x.FullAddress
	}
	return ""
}

func (x *Claimant) GetAddressNumber() string {
	if x != nil {
		return x.AddressNumber
	}
	return ""
}

func (x *Claimant) GetAddressStreet1() string {
	if x != nil {
		return x.AddressStreet1
	}
	return ""
}

func (x *Claimant) GetAddressPostcode() string {
	if x != nil {
		return x.AddressPostcode
	}
	return ""
}

func (x *Claimant) GetAddressPostTown() string {
	if x != nil {
		return x.AddressPostTown
	}
	return ""
}

func (x *Claimant) GetNationality() Nationality {
	if x != nil {
		return x.Nationality
	}
	return Nationality_NATIONALITY_UNSPECIFIED
}

// Request to create a claim.
type CreateClaimRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Claimant       *Claimant              `protobuf:"bytes,1,opt,name=claimant,proto3" json:"claimant,omitempty"`                                     // Details of the claimant
	DateOfAccident string                 `protobuf:"bytes,2,opt,name=date_of_accident,json=dateOfAccident,proto3" json:"date_of_accident,omitempty"` // Date when the accident occurred (YYYY-MM-DD)
	DamageAmount   int64                  `protobuf:"varint,3,opt,name=damage_amount,json=damageAmount,proto3" json:"damage_amount,omitempty"`        // Damage amount (stored in cents to avoid floating point issues)
	ClaimReason    string                 `protobuf:"bytes,4,opt,name=claim_reason,json=claimReason,proto3" json:"claim_reason,omitempty"`            // Brief description of the reason for the claim
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateClaimRequest) Reset() {
	*x = CreateClaimRequest{}
	mi := &file_pb_v1_oracle_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClaimRequest) ProtoMessage() {}

func (x *CreateClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_v1_oracle_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClaimRequest.ProtoReflect.Descriptor instead.
func (*CreateClaimRequest) Descriptor() ([]byte, []int) {
	return file_pb_v1_oracle_proto_rawDescGZIP(), []int{1}
}

func (x *CreateClaimRequest) GetClaimant() *Claimant {
	if x != nil {
		return x.Claimant
	}
	return nil
}

func (x *CreateClaimRequest) GetDateOfAccident() string {
	if x != nil {
		return x.DateOfAccident
	}
	return ""
}

func (x *CreateClaimRequest) GetDamageAmount() int64 {
	if x != nil {
		return x.DamageAmount
	}
	return 0
}

func (x *CreateClaimRequest) GetClaimReason() string {
	if x != nil {
		return x.ClaimReason
	}
	return ""
}

// Response for creating a claim.
type CreateClaimResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*CreateClaimResponse_Exception
	//	*CreateClaimResponse_Claim
	Result        isCreateClaimResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClaimResponse) Reset() {
	*x = CreateClaimResponse{}
	mi := &file_pb_v1_oracle_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClaimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClaimResponse) ProtoMessage() {}

func (x *CreateClaimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_v1_oracle_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClaimResponse.ProtoReflect.Descriptor instead.
func (*CreateClaimResponse) Descriptor() ([]byte, []int) {
	return file_pb_v1_oracle_proto_rawDescGZIP(), []int{2}
}

func (x *CreateClaimResponse) GetResult() isCreateClaimResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *CreateClaimResponse) GetException() *v1.Exception {
	if x != nil {
		if x, ok := x.Result.(*CreateClaimResponse_Exception); ok {
			return x.Exception
		}
	}
	return nil
}

func (x *CreateClaimResponse) GetClaim() *Claim {
	if x != nil {
		if x, ok := x.Result.(*CreateClaimResponse_Claim); ok {
			return x.Claim
		}
	}
	return nil
}

type isCreateClaimResponse_Result interface {
	isCreateClaimResponse_Result()
}

type CreateClaimResponse_Exception struct {
	Exception *v1.Exception `protobuf:"bytes,1,opt,name=exception,proto3,oneof"` // Exception details if an error occurred
}

type CreateClaimResponse_Claim struct {
	Claim *Claim `protobuf:"bytes,2,opt,name=claim,proto3,oneof"` // The created claim if successful
}

func (*CreateClaimResponse_Exception) isCreateClaimResponse_Result() {}

func (*CreateClaimResponse_Claim) isCreateClaimResponse_Result() {}

// Request to update an existing claim.
type UpdateClaimRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Claim         *Claim                 `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"` // The claim details with updates
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClaimRequest) Reset() {
	*x = UpdateClaimRequest{}
	mi := &file_pb_v1_oracle_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClaimRequest) ProtoMessage() {}

func (x *UpdateClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_v1_oracle_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClaimRequest.ProtoReflect.Descriptor instead.
func (*UpdateClaimRequest) Descriptor() ([]byte, []int) {
	return file_pb_v1_oracle_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateClaimRequest) GetClaim() *Claim {
	if x != nil {
		return x.Claim
	}
	return nil
}

// Response for updating a claim.
type UpdateClaimResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*UpdateClaimResponse_Exception
	//	*UpdateClaimResponse_Claim
	Result        isUpdateClaimResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClaimResponse) Reset() {
	*x = UpdateClaimResponse{}
	mi := &file_pb_v1_oracle_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClaimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClaimResponse) ProtoMessage() {}

func (x *UpdateClaimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_v1_oracle_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClaimResponse.ProtoReflect.Descriptor instead.
func (*UpdateClaimResponse) Descriptor() ([]byte, []int) {
	return file_pb_v1_oracle_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateClaimResponse) GetResult() isUpdateClaimResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *UpdateClaimResponse) GetException() *v1.Exception {
	if x != nil {
		if x, ok := x.Result.(*UpdateClaimResponse_Exception); ok {
			return x.Exception
		}
	}
	return nil
}

func (x *UpdateClaimResponse) GetClaim() *Claim {
	if x != nil {
		if x, ok := x.Result.(*UpdateClaimResponse_Claim); ok {
			return x.Claim
		}
	}
	return nil
}

type isUpdateClaimResponse_Result interface {
	isUpdateClaimResponse_Result()
}

type UpdateClaimResponse_Exception struct {
	Exception *v1.Exception `protobuf:"bytes,1,opt,name=exception,proto3,oneof"` // Exception details if an error occurred
}

type UpdateClaimResponse_Claim struct {
	Claim *Claim `protobuf:"bytes,2,opt,name=claim,proto3,oneof"` // The updated claim if successful
}

func (*UpdateClaimResponse_Exception) isUpdateClaimResponse_Result() {}

func (*UpdateClaimResponse_Claim) isUpdateClaimResponse_Result() {}

// Request to retrieve a claim by its unique ID.
type GetClaimRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClaimId       string                 `protobuf:"bytes,1,opt,name=claim_id,json=claimId,proto3" json:"claim_id,omitempty"` // Unique identifier of the claim to fetch
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClaimRequest) Reset() {
	*x = GetClaimRequest{}
	mi := &file_pb_v1_oracle_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClaimRequest) ProtoMessage() {}

func (x *GetClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_v1_oracle_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClaimRequest.ProtoReflect.Descriptor instead.
func (*GetClaimRequest) Descriptor() ([]byte, []int) {
	return file_pb_v1_oracle_proto_rawDescGZIP(), []int{5}
}

func (x *GetClaimRequest) GetClaimId() string {
	if x != nil {
		return x.ClaimId
	}
	return ""
}

// Response containing the requested claim.
type GetClaimResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*GetClaimResponse_Exception
	//	*GetClaimResponse_Claim
	Result        isGetClaimResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClaimResponse) Reset() {
	*x = GetClaimResponse{}
	mi := &file_pb_v1_oracle_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClaimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClaimResponse) ProtoMessage() {}

func (x *GetClaimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_v1_oracle_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClaimResponse.ProtoReflect.Descriptor instead.
func (*GetClaimResponse) Descriptor() ([]byte, []int) {
	return file_pb_v1_oracle_proto_rawDescGZIP(), []int{6}
}

func (x *GetClaimResponse) GetResult() isGetClaimResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GetClaimResponse) GetException() *v1.Exception {
	if x != nil {
		if x, ok := x.Result.(*GetClaimResponse_Exception); ok {
			return x.Exception
		}
	}
	return nil
}

func (x *GetClaimResponse) GetClaim() *Claim {
	if x != nil {
		if x, ok := x.Result.(*GetClaimResponse_Claim); ok {
			return x.Claim
		}
	}
	return nil
}

type isGetClaimResponse_Result interface {
	isGetClaimResponse_Result()
}

type GetClaimResponse_Exception struct {
	Exception *v1.Exception `protobuf:"bytes,1,opt,name=exception,proto3,oneof"` // Exception details if an error occurred
}

type GetClaimResponse_Claim struct {
	Claim *Claim `protobuf:"bytes,2,opt,name=claim,proto3,oneof"` // The retrieved claim if successful
}

func (*GetClaimResponse_Exception) isGetClaimResponse_Result() {}

func (*GetClaimResponse_Claim) isGetClaimResponse_Result() {}

// Represents an insurance claim, storing its lifecycle, status, and related claimant details.
type Claim struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ClaimId        string                 `protobuf:"bytes,1,opt,name=claim_id,json=claimId,proto3" json:"claim_id,omitempty"`                        // Unique ID assigned by the backend (immutable)
	State          ClaimState             `protobuf:"varint,2,opt,name=state,proto3,enum=pb.v1.ClaimState" json:"state,omitempty"`                    // The current internal processing state of the claim
	Claimant       *Claimant              `protobuf:"bytes,3,opt,name=claimant,proto3" json:"claimant,omitempty"`                                     // Claimant details
	DateOfAccident string                 `protobuf:"bytes,4,opt,name=date_of_accident,json=dateOfAccident,proto3" json:"date_of_accident,omitempty"` // Date when the accident occurred (YYYY-MM-DD)
	DamageAmount   int64                  `protobuf:"varint,5,opt,name=damage_amount,json=damageAmount,proto3" json:"damage_amount,omitempty"`        // Damage amount (stored in cents to prevent floating point issues)
	ClaimReason    string                 `protobuf:"bytes,6,opt,name=claim_reason,json=claimReason,proto3" json:"claim_reason,omitempty"`            // Description of why the claim was filed
	Status         Status                 `protobuf:"varint,7,opt,name=status,proto3,enum=pb.v1.Status" json:"status,omitempty"`                      // The final outcome of the claim
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Claim) Reset() {
	*x = Claim{}
	mi := &file_pb_v1_oracle_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Claim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim) ProtoMessage() {}

func (x *Claim) ProtoReflect() protoreflect.Message {
	mi := &file_pb_v1_oracle_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim.ProtoReflect.Descriptor instead.
func (*Claim) Descriptor() ([]byte, []int) {
	return file_pb_v1_oracle_proto_rawDescGZIP(), []int{7}
}

func (x *Claim) GetClaimId() string {
	if x != nil {
		return x.ClaimId
	}
	return ""
}

func (x *Claim) GetState() ClaimState {
	if x != nil {
		return x.State
	}
	return ClaimState_CLAIM_STATE_UNSPECIFIED
}

func (x *Claim) GetClaimant() *Claimant {
	if x != nil {
		return x.Claimant
	}
	return nil
}

func (x *Claim) GetDateOfAccident() string {
	if x != nil {
		return x.DateOfAccident
	}
	return ""
}

func (x *Claim) GetDamageAmount() int64 {
	if x != nil {
		return x.DamageAmount
	}
	return 0
}

func (x *Claim) GetClaimReason() string {
	if x != nil {
		return x.ClaimReason
	}
	return ""
}

func (x *Claim) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_UNSPECIFIED
}

var File_pb_v1_oracle_proto protoreflect.FileDescriptor

var file_pb_v1_oracle_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x70, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x03, 0x0a, 0x08, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x61, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x62, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x31, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x77,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x77, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xb3,
	0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x63,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x66, 0x41, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x65,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00,
	0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x38, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x22, 0x7b, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x65,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x08,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52,
	0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x91, 0x02, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b,
	0x0a, 0x08, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x6e,
	0x74, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x41, 0x63, 0x63,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2a, 0x4a, 0x0a, 0x0b, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x42, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x53, 0x10, 0x02,
	0x12, 0x06, 0x0a, 0x02, 0x46, 0x52, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x45, 0x10, 0x04,
	0x2a, 0x5b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x49, 0x44, 0x10, 0x03, 0x2a, 0xfa, 0x02,
	0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x41,
	0x49, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x2a,
	0x0a, 0x26, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f,
	0x45, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f, 0x43,
	0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4c,
	0x41, 0x49, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x45, 0x43, 0x4c, 0x41,
	0x49, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4f, 0x4f, 0x45, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4f, 0x4f, 0x45, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4c, 0x41, 0x49, 0x4d,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x45, 0x46, 0x49, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x44, 0x10, 0x06, 0x12, 0x27,
	0x0a, 0x23, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4f,
	0x45, 0x46, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x56,
	0x49, 0x45, 0x57, 0x45, 0x44, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4c, 0x41, 0x49, 0x4d,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4f, 0x45, 0x46, 0x49, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08,
	0x12, 0x28, 0x0a, 0x24, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4f, 0x4f, 0x45, 0x50, 0x41, 0x59, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x45, 0x44, 0x10, 0x09, 0x42, 0x79, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6c, 0x75, 0x74, 0x68, 0x65, 0x72, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0x2f, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x62, 0x2f,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x05, 0x50, 0x62, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x05, 0x50, 0x62, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x11, 0x50, 0x62, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x06, 0x50,
	0x62, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pb_v1_oracle_proto_rawDescOnce sync.Once
	file_pb_v1_oracle_proto_rawDescData []byte
)

func file_pb_v1_oracle_proto_rawDescGZIP() []byte {
	file_pb_v1_oracle_proto_rawDescOnce.Do(func() {
		file_pb_v1_oracle_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pb_v1_oracle_proto_rawDesc), len(file_pb_v1_oracle_proto_rawDesc)))
	})
	return file_pb_v1_oracle_proto_rawDescData
}

var file_pb_v1_oracle_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pb_v1_oracle_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_pb_v1_oracle_proto_goTypes = []any{
	(Nationality)(0),            // 0: pb.v1.Nationality
	(Status)(0),                 // 1: pb.v1.Status
	(ClaimState)(0),             // 2: pb.v1.ClaimState
	(*Claimant)(nil),            // 3: pb.v1.Claimant
	(*CreateClaimRequest)(nil),  // 4: pb.v1.CreateClaimRequest
	(*CreateClaimResponse)(nil), // 5: pb.v1.CreateClaimResponse
	(*UpdateClaimRequest)(nil),  // 6: pb.v1.UpdateClaimRequest
	(*UpdateClaimResponse)(nil), // 7: pb.v1.UpdateClaimResponse
	(*GetClaimRequest)(nil),     // 8: pb.v1.GetClaimRequest
	(*GetClaimResponse)(nil),    // 9: pb.v1.GetClaimResponse
	(*Claim)(nil),               // 10: pb.v1.Claim
	(*v1.Exception)(nil),        // 11: common.v1.Exception
}
var file_pb_v1_oracle_proto_depIdxs = []int32{
	0,  // 0: pb.v1.Claimant.nationality:type_name -> pb.v1.Nationality
	3,  // 1: pb.v1.CreateClaimRequest.claimant:type_name -> pb.v1.Claimant
	11, // 2: pb.v1.CreateClaimResponse.exception:type_name -> common.v1.Exception
	10, // 3: pb.v1.CreateClaimResponse.claim:type_name -> pb.v1.Claim
	10, // 4: pb.v1.UpdateClaimRequest.claim:type_name -> pb.v1.Claim
	11, // 5: pb.v1.UpdateClaimResponse.exception:type_name -> common.v1.Exception
	10, // 6: pb.v1.UpdateClaimResponse.claim:type_name -> pb.v1.Claim
	11, // 7: pb.v1.GetClaimResponse.exception:type_name -> common.v1.Exception
	10, // 8: pb.v1.GetClaimResponse.claim:type_name -> pb.v1.Claim
	2,  // 9: pb.v1.Claim.state:type_name -> pb.v1.ClaimState
	3,  // 10: pb.v1.Claim.claimant:type_name -> pb.v1.Claimant
	1,  // 11: pb.v1.Claim.status:type_name -> pb.v1.Status
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pb_v1_oracle_proto_init() }
func file_pb_v1_oracle_proto_init() {
	if File_pb_v1_oracle_proto != nil {
		return
	}
	file_pb_v1_oracle_proto_msgTypes[2].OneofWrappers = []any{
		(*CreateClaimResponse_Exception)(nil),
		(*CreateClaimResponse_Claim)(nil),
	}
	file_pb_v1_oracle_proto_msgTypes[4].OneofWrappers = []any{
		(*UpdateClaimResponse_Exception)(nil),
		(*UpdateClaimResponse_Claim)(nil),
	}
	file_pb_v1_oracle_proto_msgTypes[6].OneofWrappers = []any{
		(*GetClaimResponse_Exception)(nil),
		(*GetClaimResponse_Claim)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pb_v1_oracle_proto_rawDesc), len(file_pb_v1_oracle_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_v1_oracle_proto_goTypes,
		DependencyIndexes: file_pb_v1_oracle_proto_depIdxs,
		EnumInfos:         file_pb_v1_oracle_proto_enumTypes,
		MessageInfos:      file_pb_v1_oracle_proto_msgTypes,
	}.Build()
	File_pb_v1_oracle_proto = out.File
	file_pb_v1_oracle_proto_goTypes = nil
	file_pb_v1_oracle_proto_depIdxs = nil
}
