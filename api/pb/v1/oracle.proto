// Copyright Â© 2021 Luther Systems, Ltd. All right reserved.

// API Models and Documentation.

syntax = "proto3";

package pb.v1;

import "common/v1/exception.proto";

option go_package = "github.com/luthersystems/sandbox/api/pb/v1";

// Request structure for the create_request endponit
message CreateAccountRequest {
  Account account = 1;
}

message CreateAccountResponse {
  common.v1.Exception exception = 1;
}

message DeleteAccountRequest {
  string account_id = 1;
}

message DeleteAccountResponse {
  common.v1.Exception exception = 1;
}

message UpdateAccountRequest {
  Account account = 1;
}

message UpdateAccountResponse {
  common.v1.Exception exception = 1;
}

message GetAccountRequest {
  string account_id = 1;
}

message GetAccountResponse {
  common.v1.Exception exception = 1;
  Account account = 2;
}

message GetUserAccountsRequest {
  string user_id = 1;
}

message GetUserAccountsResponse {
  common.v1.Exception exception = 1;
  repeated Account accounts = 2;
}

// Transfer funds from payer account to payee account. Accounts must have same denomination (asset ID). Transfer amount cannot be negative.
message TransferRequest {
  // Account debited. Required.
  string payer_id = 1;
  // Account credited. Required.
  string payee_id = 2;
  // Amount transfered from payer account to payee account. Required.
  int64 transfer_amount = 3;
}

message TransferResponse {
  common.v1.Exception exception = 1;
}

// Account represents a balance for an indiviudal denominated in a unit asset. An account holder may have multiple accounts.
message Account {
  // Unique ID for the account. Immutable.
  string account_id = 1;
  // Current balance in the account denominated in the underlying asset. Cannot be negative.
  int64 balance = 2;
  // ID for the underlying asset that current balance is denominated in. Immutable.
  string asset_id = 3;
  // ID of the primary account owner.
  string user_id = 4;
}
